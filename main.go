package main

import (
	"bufio"
	"database/sql"
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"
	"github.com/labstack/echo/v4"
	_ "github.com/lib/pq"
)

var Database *sql.DB

//func main() {

	
	e := echo.New() //–¢—ã —Å–æ–∑–¥–∞–µ—à—å "—Ä–∞—Ü–∏—é" (—Å–µ—Ä–≤–µ—Ä), –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Å–ª—É—à–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã

	// –ì–æ–≤–æ—Ä–∏–º: "–ö–æ–≥–¥–∞ –ø—Ä–∏–¥–µ—Ç GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–¥—Ä–µ—Å /hello ‚Äî —Å–¥–µ–ª–∞–π —ç—Ç–æ"
	//e.GET("/hello", func(c echo.Context) error {
        	return c.String(200, "–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!") // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ
   	 })

	e.Start(":8080") // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 8080 (–∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å "–°–ª—É—à–∞—é!")

e := echo.New()

//func bye(c echo.Context) error { 
	return c.String(200, "–ü–æ–∫–∞")
} 			

e.GET("/bye", bye ) //* -> –í –±—Ä–∞—É–∑–µ—Ä–µ —Ç—ã —É–≤–∏–¥–∏—à—å –±–µ–ª—ã–π —ç–∫—Ä–∞–Ω —Å —Ç–µ–∫—Å—Ç–æ–º "–ü–æ–∫–∞"

e.Start(":8080")


	connection := "host=localhost port=5432 user=postgres password=1303 dbname=notebook sslmode=disable"
	var err error
	Database, err = sql.Open("postgres", connection)
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", err)
	}
	defer Database.Close()

}

// –§–£–ù–ö–¶–ò–ò
func menu() {
	reader := bufio.NewReader(os.Stdin)

	// * –ü–æ–∫–∞ —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç, –º–æ–∂–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–º–µ—Ç–∫–∞–º–∏ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å!
	for {
		fmt.Println("\nüìî –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –±–ª–æ–∫–Ω–æ—Ç")
		fmt.Println("1. –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É")
		fmt.Println("2. –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏")
		fmt.Println("3. –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É")
		fmt.Println("4. –í—ã–π—Ç–∏")
		fmt.Print("üëâ –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ: ")

		input, err := reader.ReadString('\n')
		if err != nil {
			fmt.Println("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–≤–æ–¥–∞:", err)
			continue
		}
		input = strings.TrimSpace(input)

		choice, err := strconv.Atoi(input)
		if err != nil {
			fmt.Println("üö´ –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
			continue
		}

		switch choice {
		case 1:
			addNote(reader)
		case 2:
			listNotes()
		case 3:
			deleteNote(reader)
		case 4:
			fmt.Println("üëã –î–æ –≤—Å—Ç—Ä–µ—á–∏!")
			return
		default:
			fmt.Println("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
		}
	}
}
